From 35d8ac9ee040a78af0e3f88caefedb770cb552c1 Mon Sep 17 00:00:00 2001
From: OmKumarIITG <omsingh95405@gmail.com>
Date: Thu, 14 Aug 2025 19:49:39 +0530
Subject: [PATCH 2/3] nvmain: Add NeuroHammer parameters to Params class

---
 src/Params.cpp | 68 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/Params.h   | 30 ++++++++++++++++++++++
 2 files changed, 98 insertions(+)

diff --git a/src/Params.cpp b/src/Params.cpp
index 32df03f..070f54b 100644
--- a/src/Params.cpp
+++ b/src/Params.cpp
@@ -202,6 +202,23 @@ Params::Params( )
 
     debugOn = false;
     debugClasses.clear();
+
+    /* Initialize NeuroHammer parameters with defaults */
+    HC_first = 50000.0;
+    HC_last = 150000.0;
+    HC_last_bitflip_rate = 0.005;
+
+    inc_dist_1 = 1.0;
+    inc_dist_2 = 0.0;
+    inc_dist_3 = 0.0;
+    inc_dist_4 = 0.0;
+    inc_dist_5 = 0.0;
+
+    proba_1_bit_flipped = 1.0;
+    proba_2_bit_flipped = 0.0;
+    proba_3_bit_flipped = 0.0;
+    proba_4_bit_flipped = 0.0;
+    flip_mask = 0;  
 }
 
 Params::~Params( )
@@ -424,5 +441,56 @@ void Params::SetParams( Config *c )
             std::cout << "Unknown PauseMode: " << c->GetString( "PauseMode" )
                       << ". Defaulting to Normal" << std::endl;
     }
+
+
+
+    /* Load NeuroHammer Attack Parameters */
+    if(c->KeyExists("HC_first"))
+    HC_first = static_cast<double>(atof(c->GetString("HC_first").c_str()));
+
+    if(c->KeyExists("HC_last"))
+        HC_last = static_cast<double>(atof(c->GetString("HC_last").c_str()));
+
+    if(c->KeyExists("HC_last_bitflip_rate"))
+        HC_last_bitflip_rate = static_cast<double>(atof(c->GetString("HC_last_bitflip_rate").c_str()));    
+    // Distance related hammer count increment
+    if(c->KeyExists("inc_dist_1"))
+        inc_dist_1 = static_cast<double>(atof(c->GetString("inc_dist_1").c_str()));
+
+    if(c->KeyExists("inc_dist_2"))
+        inc_dist_2 = static_cast<double>(atof(c->GetString("inc_dist_2").c_str()));
+
+    if(c->KeyExists("inc_dist_3"))
+        inc_dist_3 = static_cast<double>(atof(c->GetString("inc_dist_3").c_str()));
+
+    if(c->KeyExists("inc_dist_4"))
+        inc_dist_4 = static_cast<double>(atof(c->GetString("inc_dist_4").c_str()));
+
+    if(c->KeyExists("inc_dist_5"))
+        inc_dist_5 = static_cast<double>(atof(c->GetString("inc_dist_5").c_str()));    
+    // Bit flip probabilities
+    if(c->KeyExists("proba_1_bit_flipped"))
+        proba_1_bit_flipped = static_cast<double>(atof(c->GetString("proba_1_bit_flipped").c_str()));
+
+    if(c->KeyExists("proba_2_bit_flipped"))
+        proba_2_bit_flipped = static_cast<double>(atof(c->GetString("proba_2_bit_flipped").c_str()));
+
+    if(c->KeyExists("proba_3_bit_flipped"))
+        proba_3_bit_flipped = static_cast<double>(atof(c->GetString("proba_3_bit_flipped").c_str()));
+
+    if(c->KeyExists("proba_4_bit_flipped"))
+        proba_4_bit_flipped = static_cast<double>(atof(c->GetString("proba_4_bit_flipped").c_str()));
+    // flip mask
+    if(c->KeyExists("flip_mask"))
+    {
+        std::string mask_str = c->GetString("flip_mask");
+        // Check if the string starts with "0x" for hex format
+        if(mask_str.substr(0,2) == "0x")
+            flip_mask = static_cast<uint64_t>(strtoull(mask_str.c_str(), NULL, 16));
+        else
+            //otherwise, it is decimal
+            flip_mask = static_cast<uint64_t>(strtoull(mask_str.c_str(), NULL, 10));
+    }
+
 }
 
diff --git a/src/Params.h b/src/Params.h
index 91129be..2d81e68 100644
--- a/src/Params.h
+++ b/src/Params.h
@@ -56,6 +56,14 @@ enum PauseMode {
     PauseMode_Optimal   ///< Optimal: Same as IIWC, but consider iteration complete
 };
 
+/* custom data_types 
+-----------------------------------------------------
+typedef uint64_t  ncycle_t;     // For cycle counts
+typedef int64_t   ncycles_t;    // For signed cycle counts
+typedef uint64_t  ncounter_t;   // For general counters
+typedef int64_t   ncounters_t;  // For signed counters
+*/
+
 class Params
 {
   public:
@@ -209,6 +217,28 @@ class Params
     ncounter_t MaxCancellations;
     PauseMode pauseMode;
 
+
+
+    /* NeuroHammer Attack Parameters */
+    double HC_first;              // Number of hammers for first bit flips
+    double HC_last;               // Number of hammers where no new flips occur
+    double HC_last_bitflip_rate;  // Probability of quadword flip at HC_last
+    
+    double inc_dist_1;            // Distance related hammer count increment
+    double inc_dist_2;
+    double inc_dist_3;
+    double inc_dist_4;
+    double inc_dist_5;
+    
+    double proba_1_bit_flipped;   // Probabilities for number of bits flipped in a quad word
+    double proba_2_bit_flipped;
+    double proba_3_bit_flipped;
+    double proba_4_bit_flipped;
+    
+    uint64_t flip_mask;           // Predefined static flip mask
+
+
+
   private:
     void ConvertTiming( Config *conf, std::string param, ncycle_t& value );
     ncycle_t ConvertTiming( Config *conf, std::string param );
-- 
2.43.0

